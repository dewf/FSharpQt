module AbstractItemModel;

import Object;
import Enums;
import ModelIndex;
import PersistentModelIndex;
import Variant;

namedbits SignalMask extends Object.SignalMask {
    ColumnsAboutToBeInserted,
    ColumnsAboutToBeMoved,
    ColumnsAboutToBeRemoved,
    ColumnsInserted,
    ColumnsMoved,
    ColumnsRemoved,
    DataChanged,
    HeaderDataChanged,
    LayoutAboutToBeChanged,
    LayoutChanged,
    ModelAboutToBeReset,
    ModelReset,
    RowsAboutToBeInserted,
    RowsAboutToBeMoved,
    RowsAboutToBeRemoved,
    RowsInserted,
    RowsMoved,
    RowsRemoved
}

enum LayoutChangeHint
{
    NoLayoutChangeHint,
    VerticalSortHint,
    HorizontalSortHint
}

interface SignalHandler {
    // Object:
    void destroyed(Object.Handle obj);
    void objectNameChanged(string objectName);

    // AbstractItemModel:
    void columnsAboutToBeInserted(ModelIndex.Handle parent, int first, int last);
    void columnsAboutToBeMoved(ModelIndex.Handle sourceParent, int sourceStart, int sourceEnd, ModelIndex.Handle destinationParent, int destinationColumn);
    void columnsAboutToBeRemoved(ModelIndex.Handle parent, int first, int last);
    void columnsInserted(ModelIndex.Handle parent, int first, int last);
    void columnsMoved(ModelIndex.Handle sourceParent, int sourceStart, int sourceEnd, ModelIndex.Handle destinationParent, int destinationColumn);
    void columnsRemoved(ModelIndex.Handle parent, int first, int last);
    void dataChanged(ModelIndex.Handle topLeft, ModelIndex.Handle bottomRight, Array<ItemDataRole> roles);
    void headerDataChanged(Orientation orientation, int first, int last);
    void layoutAboutToBeChanged(Array<PersistentModelIndex.Handle> parents, LayoutChangeHint hint);
    void layoutChanged(Array<PersistentModelIndex.Handle> parents, LayoutChangeHint hint);
    void modelAboutToBeReset();
    void modelReset();
    void rowsAboutToBeInserted(ModelIndex.Handle parent, int start, int end);
    void rowsAboutToBeMoved(ModelIndex.Handle sourceParent, int sourceStart, int sourceEnd, ModelIndex.Handle destinationParent, int destinationRow);
    void rowsAboutToBeRemoved(ModelIndex.Handle parent, int first, int last);
    void rowsInserted(ModelIndex.Handle parent, int first, int last);
    void rowsMoved(ModelIndex.Handle sourceParent, int sourceStart, int sourceEnd, ModelIndex.Handle destinationParent, int destinationRow);
    void rowsRemoved(ModelIndex.Handle parent, int first, int last);
}

@nodispose
opaque Handle extends Object.Handle {
    // overloads of a single method:
    ModelIndex.Owned index(int row, int column);
    ModelIndex.Owned index(int row, int column, ModelIndex.Handle parent);

    bool setData(ModelIndex.Handle index, Variant.Deferred value);
    bool setData(ModelIndex.Handle index, Variant.Deferred value, ItemDataRole role);

    Variant.Owned data(ModelIndex.Handle index);
    Variant.Owned data(ModelIndex.Handle index, ItemDataRole role);

    void sort(int column);
    void sort(int column, SortOrder order);
}
