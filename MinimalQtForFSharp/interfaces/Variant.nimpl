module Variant;

import Icon;
import Common;
import Enums;

// todo, replace with individual modules? (color, brush, font, etc)
import PaintResources; // for color, brush, etc (deferred)

sumtype ServerValue {
    Bool(bool value),
    String(string value),
    Int(int value),

    // for other things (Icon, Color, etc), we need:
    // 1) Owned-handle versions of these
    // 2) virtual dtors perhaps? in any case, all cases of a sumtype must fully dispose when disposed from the base type
    // alternatively we could use refcounted interfaces, but seeing as we've been avoiding those everywhere else ...
    
    // as-yet-unsupported:
    Unknown
}

@nodispose
opaque Handle {
    bool isValid();

    bool toBool();
    string toString2(); // toString() is a C# thing
    int toInt();
    Size toSize();

    // convenience function, special values for toInt()
    CheckState toCheckState();

    // Icon.Owned toIcon();
    // Color.Owned toColor();

    ServerValue toServerValue();
}

opaque Owned extends Handle;

sumtype Deferred {
    Empty,
    FromBool(bool value),
    FromString(string value),
    FromInt(int value),
    FromCheckState(CheckState value), // convenience for int 0/1/2
    FromSize(Size size),
    FromIcon(Icon.Deferred value),
    FromColor(Color.Deferred value),
    FromAligment(Alignment value)
}
